import rusty_neat
from rusty_neat import ndalgebra as nd

context = rusty_neat.make_gpu_context()  # First create OpenCL context

x = nd.array([1, 2, 3, 4], context, dtype=nd.f32)
assert str(x) == "[1, 2, 3, 4]"
a, b, c, d = x
assert (a, b, c, d) == (1, 2, 3, 4)
assert x[0] == 1
assert x[1] == 2
assert x[2] == 3
assert x[3] == 4

x = nd.array([[1], [2], [3], [4]], context, dtype=nd.float32)
assert str(x) == "[[1], [2], [3], [4]]"
a, b, c, d = x
assert (str(a), str(b), str(c), str(d)) == ("[1]", "[2]", "[3]", "[4]")
a, b, c, d = a.item(), b.item(), c.item(), d.item()
assert (a, b, c, d) == (1, 2, 3, 4)
assert str(x[0]) == "[1]"

x[:, :] = 6
assert str(x) == "[[6], [6], [6], [6]]"

x = x.reshape(2, 2)
assert str(x) == "[[6, 6], [6, 6]]"
x[0, :] = 2
assert str(x) == "[[2, 2], [6, 6]]"

y = nd.array([1, 2], context)
x[:, 0] = y
assert str(x) == "[[1, 2], [2, 6]]"
x[:, 1] = [14, 32]
assert str(x) == "[[1, 14], [2, 32]]"
x[:, 1] = -3
assert str(x) == "[[1, -3], [2, -3]]"

x = nd.array([[0, 1, 0],
              [1, 0, 0],
              [0, 0, 1]], context)
y = nd.array([[0, 1, 2],
              [3, 4, 5],
              [6, 7, 8]], context)
z = x + y
assert str(z) == "[[0, 2, 2], [4, 4, 5], [6, 7, 9]]"
z += x
assert str(z) == "[[0, 3, 2], [5, 4, 5], [6, 7, 10]]"
z = x - y
assert str(z) == "[[0, 0, -2], [-2, -4, -5], [-6, -7, -7]]"
z -= x
assert str(z) == "[[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]"
z = (x + x) * y
assert str(z) == "[[0, 2, 0], [6, 0, 0], [0, 0, 16]]"
z[:, :] = y
assert str(z) == "[[0, 1, 2], [3, 4, 5], [6, 7, 8]]"
z *= x
assert str(z) == "[[0, 1, 0], [3, 0, 0], [0, 0, 8]]"
z = x+1
assert str(z) == "[[1, 2, 1], [2, 1, 1], [1, 1, 2]]"
z = x*2
assert str(z) == "[[0, 2, 0], [2, 0, 0], [0, 0, 2]]"
z = x-10
assert str(z) == "[[-10, -9, -10], [-9, -10, -10], [-10, -10, -9]]"
z = x @ y
assert str(z) == "[[3, 4, 5], [0, 1, 2], [6, 7, 8]]"
z = y @ x
assert str(z) == "[[1, 0, 2], [4, 3, 5], [7, 6, 8]]"
z = y / (x+1)
assert str(z) == "[[0, 0, 2], [1, 4, 5], [6, 7, 4]]"
y_f32 = y.astype(nd.float32)
assert y_f32.dtype == nd.float32
x_f32 = x.astype(nd.float32)
assert x_f32.dtype == nd.float32
z = y_f32 / (x_f32+1)
assert str(z) == "[[0, 0.5, 2], [1.5, 4, 5], [6, 7, 4]]"
z = 1 - x
assert str(z) == "[[1, 0, 1], [0, 1, 1], [1, 1, 0]]"
z = 1 / (1+y_f32)
assert str(z) == "[[1, 0.5, 0.33333334], [0.25, 0.2, 0.16666667], [0.14285715, 0.125, 0.11111111]]"
z = 1 + x
assert str(z) == "[[1, 2, 1], [2, 1, 1], [1, 1, 2]]"
z = 100*y_f32
assert str(z) == "[[0, 100, 200], [300, 400, 500], [600, 700, 800]]"
z = nd.exp(y)
assert str(z) == "[[1, 2.7182817, 7.389056], [20.085537, 54.59815, 148.41316], [403.4288, 1096.6332, 2980.958]]"
z = nd.exp(y_f32)
assert str(z) == "[[1, 2.7182817, 7.389056], [20.085537, 54.59815, 148.41316], [403.4288, 1096.6332, 2980.958]]"
z = nd.log(y)
assert str(z) == "[[-inf, 0, 0.6931472], [1.0986123, 1.3862944, 1.609438], [1.7917595, 1.9459101, 2.0794415]]"
z = nd.log(y_f32)
assert str(z) == "[[-inf, 0, 0.6931472], [1.0986123, 1.3862944, 1.609438], [1.7917595, 1.9459101, 2.0794415]]"
z = nd.sin(y)
assert str(z) == "[[0, 0.84147096, 0.9092974], [0.14112, -0.7568025, -0.9589243], [-0.2794155, 0.6569866, 0.98935825]]"
z = nd.sin(y_f32)
assert str(z) == "[[0, 0.84147096, 0.9092974], [0.14112, -0.7568025, -0.9589243], [-0.2794155, 0.6569866, 0.98935825]]"
z = nd.cos(y)
assert str(z) == "[[1, 0.5403023, -0.41614684], [-0.9899925, -0.6536436, 0.2836622], [0.96017027, 0.75390226, -0.14550003]]"
z = nd.cos(y_f32)
assert str(z) == "[[1, 0.5403023, -0.41614684], [-0.9899925, -0.6536436, 0.2836622], [0.96017027, 0.75390226, -0.14550003]]"
z = nd.tan(y)
assert str(z) == "[[0, 1.5574077, -2.1850398], [-0.14254655, 1.1578213, -3.380515], [-0.29100618, 0.871448, -6.799711]]"
z = nd.tan(y_f32)
assert str(z) == "[[0, 1.5574077, -2.1850398], [-0.14254655, 1.1578213, -3.380515], [-0.29100618, 0.871448, -6.799711]]"
z = nd.tanh(y)
assert str(z) == "[[0, 0.7615942, 0.9640276], [0.9950548, 0.9993293, 0.9999092], [0.9999877, 0.99999833, 0.99999976]]"
z = nd.tanh(y_f32)
assert str(z) == "[[0, 0.7615942, 0.9640276], [0.9950548, 0.9993293, 0.9999092], [0.9999877, 0.99999833, 0.99999976]]"

assert str(x) == "[[0, 1, 0], [1, 0, 0], [0, 0, 1]]"
assert str(y) == "[[0, 1, 2], [3, 4, 5], [6, 7, 8]]"

