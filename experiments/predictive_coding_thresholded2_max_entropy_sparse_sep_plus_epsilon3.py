import rusty_neat
from rusty_neat import ndalgebra as nd
import pandas as pd
from matplotlib import pyplot as plt
import torch
import numpy as np
from tqdm import tqdm
from scipy import ndimage
import numpy as np

SHOW_STATS = True

if SHOW_STATS:
    # with addition:  r2 = s2 + p2
    add_run = [
        [1666.911134533661, 1733.8281948633648, 1840.2177153665189, 1957.763481886319, 2078.448629679363, 2175.8647394407794, 2263.9127981664296, 2378.335281594694, 2447.6062009976763, 2495.9102592715117, 2546.1307811050397, 2586.6349617466185, 2638.497050291526, 2676.97057284128, 2684.418169094574, 2715.714658448751, 2741.5824117005777, 2766.9526873279883, 2775.493877178065, 2784.767428018269, 2819.2441361192255, 2837.272449927497, 2879.7291524161665, 2899.4006174806796, 2936.687307805121, 2976.891365901517, 3006.348763591619, 3042.146435775326, 3063.042099687264, 3085.930941824339, 3106.678464413249, 3119.7216051253668, 3147.996210656137, 3166.401523928668, 3186.2743625060616, 3213.653186150066, 3229.92394623781, 3241.94711222574, 3252.7259122247106, 3268.6382403667017, 3278.655898477384, 3295.0284092049783, 3312.2039247831003, 3319.2858636176024, 3336.827687446232, 3353.6173773677024, 3361.5549819455264, 3372.467230530745],
        [1736.4496768840918, 1839.3915751242005, 1960.7980575752701, 2092.9270851915585, 2234.752758359841, 2342.38119209609, 2445.851323551419, 2518.4718900523894, 2585.092730198639, 2638.2752459643048, 2691.9798016004806, 2766.174926910486, 2810.7722993138436, 2851.8404721625593, 2913.71464417906, 2946.180234865338, 2983.913817956019, 3030.286048793182, 3062.146366850533, 3093.5419371656303, 3126.4677703245875, 3150.4687877367305, 3176.5641092934916, 3207.895990511192, 3234.214510647166, 3254.2596234898383, 3283.1912934522425, 3304.32344389001, 3324.4507603999136, 3337.2448073254563, 3354.96847938541, 3368.3830143529444, 3388.966526948645, 3403.228927362001, 3421.635248926686, 3442.7659788822757, 3466.012521084702, 3481.2734733742177, 3492.3816995048205, 3505.063779369641, 3480.334907563705, 3500.3628673825483, 3515.9460535212083, 3528.317960176325, 3539.5318079193294, 3553.603462695809, 3571.950220134805, 3580.2065397747538],
        [1695.3259050065155, 1774.9240000452153, 1873.2851794066219, 1993.757238850212, 2099.73255120026, 2189.2031451598045, 2277.6806507748447, 2370.9909410141527, 2449.255333892562, 2507.786526269377, 2563.871665865049, 2611.210115810537, 2662.169694037687, 2695.306219411878, 2729.6848187519936, 2761.4050244299983, 2758.1409823187532, 2787.4236774905494, 2816.0596801541956, 2843.271127320904, 2848.322761309094, 2862.290133800555, 2886.5381306670993, 2899.8356084715188, 2913.581707005663, 2929.863119549007, 2943.653010137823, 2956.1576746644973, 2969.4455817735, 2992.6583432270218, 3003.0002171438064, 3029.966219607234, 3053.19160056685, 3074.4014805148454, 3082.6518485719607, 3092.446721953143, 3104.1571434383413, 3120.101848195147, 3120.9568679064946, 3140.3899713927876, 3169.6492387931476, 3208.0464983192855, 3227.8992772801703, 3238.1562609157636, 3260.3467560901404, 3282.7681563926812, 3297.8755062032965, 3308.359845463838],
        [1606.9167306300192, 1670.129646371612, 1764.419827926789, 1888.8320490293502, 1996.0451929245535, 2114.451572573079, 2208.8328999592054, 2317.712548057278, 2424.7281167847864, 2495.811425415503, 2562.8676394716686, 2615.8064323868134, 2673.481880465847, 2728.3263619706586, 2780.8292219136147, 2832.6750571885655, 2877.4758879358624, 2943.3544195488894, 2980.8755516380415, 3025.921806189268, 3060.7309106295106, 3095.9565071971397, 3113.03006757469, 3135.6797383828784, 3159.0737915954583, 3183.157559046085, 3205.552542257245, 3212.8989222509827, 3229.761150144781, 3244.928581309811, 3258.4632848366678, 3272.082573110392, 3290.8790541330486, 3288.9675671770415, 3300.5779944618926, 3294.4973577013807, 3299.0422783410704, 3311.030869191904, 3320.3398464236107, 3329.4953306782077, 3327.9549153445837, 3329.282754355459, 3332.7452321705778, 3332.355311135557, 3337.5738044414843, 3344.5707231606075, 3350.183836257764, 3363.7854061635603],
    ]
    # with multiplication: r2 = s2 * p2
    mul_run = [
        [1661.75391658262, 1763.4922607520477, 1898.9927756450975, 2062.837622329534, 2257.7193503236094, 2401.8209676697766, 2528.4171529440055, 2617.8066013434495, 2685.7321458116826, 2752.11395885558, 2799.498798726218, 2839.1870063678866, 2876.423467058229, 2909.005345533271, 2932.126083335182, 2957.5352894656185, 2972.697417684832, 2986.581220534648, 2996.260038415308, 3008.604067406658, 3014.6799558066323, 3023.9924429766584, 3038.7874885494716, 3050.589934236474, 3061.161068478992, 3053.2451626132697, 3054.3225340196086, 3025.2003091074225, 3006.642013891083, 2997.5261972924536, 2943.287250940409, 2939.794216615262, 2932.1087020350215, 2923.2547717773577, 2881.068264417518, 2926.400991282568, 2961.4995682926365, 3002.719190649531, 3040.025678140327, 3095.4185322628186, 3122.774810304177, 3164.068771351503, 3177.4306790262817, 3201.9026337980267, 3230.943822047239, 3255.0158613758986, 3274.598713093751, 3294.7723370028584, 3301.4263836975188, 3319.9396670724936, 3336.534475125156],
        [1666.6250340197316, 1728.6114008745728, 1817.3952690427952, 1937.9053468228183, 2099.193992373664, 2215.3784149132607, 2342.3981900939043, 2443.7140195972343, 2552.776399472792, 2620.1360183108086, 2680.196473021449, 2741.12508332993, 2792.6505392799327, 2837.51697401019, 2887.0140631818253, 2927.2069895357613, 2972.325483533887, 3011.773107884002, 3042.5898111414367, 3074.8080384616283, 3105.3926429814746, 3126.2182490824475, 3149.322187030393, 3165.8424809790486, 3184.5381391233313, 3195.3757497463807, 3212.771462476236, 3219.1394859450725, 3228.8485482444544, 3233.1351733598267, 3235.2880558849806, 3237.95755516548, 3244.2624331977754, 3251.5981074278657, 3241.584449417908, 3237.971217916797, 3235.882395756592, 3239.0383191999185, 3243.183600983274, 3255.241065390001, 3259.7338173015423, 3273.805358883465, 3278.81156786746, 3292.243169365074, 3305.455265303435, 3312.758195349758, 3305.4319177830985, 3307.600719759686, 3285.6327756445485, 3282.7300116261313],
        [1672.6105241451748, 1779.1588317792641, 1896.9121998308012, 2034.3959276905096, 2157.528086063388, 2290.014481540688, 2395.791065132312, 2494.4426344789435, 2566.6167826107308, 2635.4436290964654, 2698.751784997291, 2755.1189376498296, 2822.6811971594384, 2880.9060497574987, 2928.787617944783, 2967.6863215389303, 2999.0040794607744, 3031.713730108212, 3056.8996761786625, 3085.963938596386, 3108.5707281892824, 3133.1084103744442, 3158.646145458037, 3182.209144612738, 3205.117837877456, 3221.1744797038345, 3233.7896224975907, 3252.574798884827, 3264.6240453610967, 3280.0717956990948, 3294.598103633705, 3306.1540695882736, 3316.4060323484837, 3323.4654743999617, 3330.05893687431, 3334.8138046187846, 3338.862464443831, 3348.1172093093824, 3350.5463407833786, 3353.853915857946, 3355.7298570032945, 3355.564837569867, 3347.489007093789, 3350.79679617102, 3344.291629592353, 3331.4250155564537, 3322.0839426707807, 3303.9200135224974],
        [1619.4784175753566, 1664.8352431455235, 1735.853464368723, 1843.2867522448403, 1941.825375634435, 2042.062644873802, 2143.556004838926, 2225.410494550721, 2293.1509106039402, 2360.0517597006497, 2421.994370128554, 2472.1437997874355, 2521.45485093833, 2568.664976790666, 2606.74162797574, 2640.45181910276, 2672.1284518207062, 2702.528433905388, 2734.887118217952, 2768.5553498550657, 2799.147167576176, 2834.730227425884, 2855.117787687264, 2874.9617122123746, 2889.7812666948766, 2903.357447162854, 2919.846998641877, 2943.542503187374, 2952.256382258918, 2961.489219311019, 2968.2906514651386, 2978.380920222655, 2999.705538266097, 3005.1083424389753, 3005.565057389902, 3013.4756009562925, 3016.8975253999074, 3016.9541655437797, 3048.326175354836, 3052.6336473953984, 3060.6886410818424, 3049.6590205018365, 3051.1968080170827, 3046.523017539884, 3041.127053960851, 3057.027104442809, 3072.0223646117556, 3098.846382011549, 3120.168513629213],
    ]
    shortest = min([len(a) for a in add_run]+[len(a) for a in mul_run])
    for a in add_run:
        plt.plot(a[:shortest], marker="+")
    for a in mul_run:
        plt.plot(a[:shortest], marker="*")
    plt.legend()
    plt.show()




MNIST, LABELS = torch.load('htm/data/mnist.pt')

PATCH_SIZE = np.array([5, 5])
POP_SIZE2 = 20
POP_SIZE1 = 80
sep_sparsity = 5
w1 = np.zeros((PATCH_SIZE.prod(), POP_SIZE1))
for i in range(POP_SIZE1):
    w1[np.random.permutation(PATCH_SIZE.prod())[:sep_sparsity], i] = 1
w2 = np.random.rand(POP_SIZE1, POP_SIZE2)
w1 = w1 / w1.sum(0)
w2n = w2 / w2.sum(0)
del w2
p2 = np.ones(POP_SIZE2)
k1 = 15


def rand_patch():
    r = np.random.rand(2)
    img = MNIST[int(np.random.rand() * len(MNIST))]
    left_bottom = (img.shape - PATCH_SIZE) * r
    left_bottom = left_bottom.astype(int)
    top_right = left_bottom + PATCH_SIZE
    img = img[left_bottom[0]:top_right[0], left_bottom[1]:top_right[1]]
    return np.float32(img / 255 > 0.8)


sep_threshold = 0.4
threshold = 0.2
epsilon = 0.0001
activity_epsilon = 0.0001
activity_regen_epsilon = activity_epsilon / POP_SIZE2


def run(x, update_activity=True):
    global p2
    s1 = x.reshape(-1) @ w1
    top_k = np.argpartition(s1, -k1)[-k1:]
    top_k = top_k[s1[top_k] >= sep_threshold]
    x2 = np.zeros(POP_SIZE1)
    x2[top_k] = 1
    s2 = x2 @ w2n
    r2 = s2 * p2
    top_1 = r2.argmax()
    if s2[top_1] >= threshold:
        if update_activity:
            p2[top_1] -= activity_epsilon
    else:
        top_1 = None
    return x2, top_1, s2[top_1]


def learn(x2, top_1):
    global w2n
    w2n[:, top_1] += epsilon * x2
    w2n[:, top_1] = w2n[:, top_1] / w2n[:, top_1].sum(0)


w, h = 5, 4
fig, axs = plt.subplots(w, h)
test_patches = [rand_patch() for _ in range(20000)]
sums_s = []
for idx in range(2000000):
    img = rand_patch()
    middle, top, _ = run(img)
    if top is not None:
        learn(middle, top)
    if idx % 2000 == 0:
        stats = np.zeros((POP_SIZE2, PATCH_SIZE[0], PATCH_SIZE[1]))
        probability = np.zeros(POP_SIZE2)
        sum_s = 0
        for img in test_patches:
            _, top, top_s = run(img, update_activity=False)
            if top is not None:
                probability[top] += 1
                stats[top] += img
                sum_s += top_s
        sums_s.append(sum_s)
        print(sums_s)
        print(probability)
        print(probability/probability.sum())
        # print(stats)
        for i in range(w):
            for j in range(h):
                axs[i, j].imshow(stats[i + j * w])
        plt.pause(0.01)

plt.show()
